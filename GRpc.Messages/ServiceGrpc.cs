// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: service.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace GRpc.Messages {
  public static partial class CandidateService
  {
    static readonly string __ServiceName = "Message.CandidateService";

    static readonly grpc::Marshaller<global::GRpc.Messages.Candidate> __Marshaller_Message_Candidate = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GRpc.Messages.Candidate.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GRpc.Messages.CreateCvResponse> __Marshaller_Message_CreateCvResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GRpc.Messages.CreateCvResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::GRpc.Messages.DownloadByName> __Marshaller_Message_DownloadByName = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::GRpc.Messages.DownloadByName.Parser.ParseFrom);

    static readonly grpc::Method<global::GRpc.Messages.Candidate, global::GRpc.Messages.CreateCvResponse> __Method_CreateCv = new grpc::Method<global::GRpc.Messages.Candidate, global::GRpc.Messages.CreateCvResponse>(
        grpc::MethodType.ClientStreaming,
        __ServiceName,
        "CreateCv",
        __Marshaller_Message_Candidate,
        __Marshaller_Message_CreateCvResponse);

    static readonly grpc::Method<global::GRpc.Messages.DownloadByName, global::GRpc.Messages.Candidate> __Method_DownloadCv = new grpc::Method<global::GRpc.Messages.DownloadByName, global::GRpc.Messages.Candidate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DownloadCv",
        __Marshaller_Message_DownloadByName,
        __Marshaller_Message_Candidate);

    static readonly grpc::Method<global::GRpc.Messages.Candidate, global::GRpc.Messages.Candidate> __Method_CreateDownloadCv = new grpc::Method<global::GRpc.Messages.Candidate, global::GRpc.Messages.Candidate>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDownloadCv",
        __Marshaller_Message_Candidate,
        __Marshaller_Message_Candidate);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::GRpc.Messages.ServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of CandidateService</summary>
    [grpc::BindServiceMethod(typeof(CandidateService), "BindService")]
    public abstract partial class CandidateServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::GRpc.Messages.CreateCvResponse> CreateCv(grpc::IAsyncStreamReader<global::GRpc.Messages.Candidate> requestStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GRpc.Messages.Candidate> DownloadCv(global::GRpc.Messages.DownloadByName request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::GRpc.Messages.Candidate> CreateDownloadCv(global::GRpc.Messages.Candidate request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for CandidateService</summary>
    public partial class CandidateServiceClient : grpc::ClientBase<CandidateServiceClient>
    {
      /// <summary>Creates a new client for CandidateService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CandidateServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for CandidateService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CandidateServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CandidateServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CandidateServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncClientStreamingCall<global::GRpc.Messages.Candidate, global::GRpc.Messages.CreateCvResponse> CreateCv(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateCv(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncClientStreamingCall<global::GRpc.Messages.Candidate, global::GRpc.Messages.CreateCvResponse> CreateCv(grpc::CallOptions options)
      {
        return CallInvoker.AsyncClientStreamingCall(__Method_CreateCv, null, options);
      }
      public virtual global::GRpc.Messages.Candidate DownloadCv(global::GRpc.Messages.DownloadByName request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DownloadCv(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GRpc.Messages.Candidate DownloadCv(global::GRpc.Messages.DownloadByName request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DownloadCv, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GRpc.Messages.Candidate> DownloadCvAsync(global::GRpc.Messages.DownloadByName request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DownloadCvAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GRpc.Messages.Candidate> DownloadCvAsync(global::GRpc.Messages.DownloadByName request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DownloadCv, null, options, request);
      }
      public virtual global::GRpc.Messages.Candidate CreateDownloadCv(global::GRpc.Messages.Candidate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDownloadCv(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::GRpc.Messages.Candidate CreateDownloadCv(global::GRpc.Messages.Candidate request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDownloadCv, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::GRpc.Messages.Candidate> CreateDownloadCvAsync(global::GRpc.Messages.Candidate request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDownloadCvAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::GRpc.Messages.Candidate> CreateDownloadCvAsync(global::GRpc.Messages.Candidate request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDownloadCv, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CandidateServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CandidateServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(CandidateServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateCv, serviceImpl.CreateCv)
          .AddMethod(__Method_DownloadCv, serviceImpl.DownloadCv)
          .AddMethod(__Method_CreateDownloadCv, serviceImpl.CreateDownloadCv).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, CandidateServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateCv, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::GRpc.Messages.Candidate, global::GRpc.Messages.CreateCvResponse>(serviceImpl.CreateCv));
      serviceBinder.AddMethod(__Method_DownloadCv, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GRpc.Messages.DownloadByName, global::GRpc.Messages.Candidate>(serviceImpl.DownloadCv));
      serviceBinder.AddMethod(__Method_CreateDownloadCv, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::GRpc.Messages.Candidate, global::GRpc.Messages.Candidate>(serviceImpl.CreateDownloadCv));
    }

  }
}
#endregion
